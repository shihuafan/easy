<import name="collocation" src="./collocation.ux"></import>
<import name="classify" src="./classify.ux"></import>
<import name="wardrobe" src="./wardrobe.ux"></import>
<import name="mine" src="./mine.ux"></import>

<template>
  <!-- template里只能有一个根节点 -->
  <div class="demo-page">
    
    <tabs onchange="changeTabactive" index='0'>
        
        <tab-content class='tab-content'>
            <collocation class='content'></collocation>
            <wardrobe class='content' list="{{list}}" optionList="{{optionList}}"></wardrobe>
            <classify class='content' list="{{list}}" optionList="{{optionList}}"></classify>
            <mine class='content'></mine>

        </tab-content>

        <tab-bar mode="fixed" class='tab-bar'>
            <div class='bar' for='icon_src'>
                <image src='{{$item}}'></image>
            </div>
        </tab-bar>
    </tabs>
  
  </div>
</template>

<script>
import router from '@system.router'
import prompt from '@system.prompt'
import fetch from '@system.fetch'
export default {
  // 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖
  private: {
    title: '示例页面',
    list:[],
    optionList: ['设置','全部','长裤','外套','卫衣','羽绒服','短裤','T-恤','短袖','裙子','POLO衫','马甲'],
    icon_src: ['/Common/icon_collocation.png',
      '/Common/icon_wardrobe.png',
      '/Common/icon_classify.png',
      '/Common/icon_mine.png'],
    description: '每个季节都会有新的流行元素出台，不要盲目跟风，让自己变成潮流预报员，反而失去了自己的风格。关键是购买经典款式的衣饰，耐穿、耐看，同时加入一些潮流元素，不至于太显沉闷。'
  },
  async onInit(){
    try {
      const response = await fetch.fetch({
        url: 'http://134.175.250.33/cloth/findall',
        method: 'POST',
        data: 
          {
            uid: '1'
          },
      })
      var obj = JSON.parse(response.data.data)
      for (var i=0;i<obj.data.length;i++){ 
        for(var j=0;j<obj.data[i].list.length;j++){
          var temp=obj.data[i].list[j]
          temp.url='http://134.175.250.33:8080/fashion/img/'+temp.url
          temp.class_id=temp.class_name
          temp.class_name=this.optionList[temp.class_id]
          this.list.push(temp)
        }
      }
    } catch(err) {
      prompt.showToast({
        message: (err.data)
      })
    }
  },
  changeTabactive(e){
    this.icon_src=['/Common/icon_collocation.png',
      '/Common/icon_wardrobe.png',
      '/Common/icon_classify.png',
      '/Common/icon_mine.png']
    switch(e.index){
    case 0:{
      this.icon_src[0]='/Common/icon_collocation_fill.png'
      break
    }
    case 1:{
      this.icon_src[1]='/Common/icon_wardrobe_fill.png'
      break
    }
    case 2:{
      this.icon_src[2]='/Common/icon_classify_fill.png'
      break
    }
    case 3:{
      this.icon_src[3]='/Common/icon_mine_fill.png'
      break
    }


    }
  },
  routeDetail () {
    // 跳转到应用内的某个页面，router用法详见：文档->接口->页面路由
    router.push ({
      uri: '/DemoDetail'
    })
  }
}
</script>

<style lang="less">
.demo-page {
  width: 100%;
  height: 100%;
  padding: 15px;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  .tab-content {
      width: 100%;
      height: 93%;
      .content{
          width: 100%;
          height: 100%;
          flex-direction: column;
          
      }
  }
  .tab-bar {
    width: 100%;
    height: 7%;
    .bar{
      width: 25%;
      height: 100%;
      padding: 15px;
      justify-content: center;
    }
  }
}  
</style>
